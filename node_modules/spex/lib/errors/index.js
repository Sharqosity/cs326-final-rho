<<<<<<< HEAD
'use strict';

var $npm = {
    BatchError: require('./batch'),
    PageError: require('./page'),
    SequenceError: require('./sequence')
};
=======
const {BatchError} = require('./batch');
const {PageError} = require('./page');
const {SequenceError} = require('./sequence');

>>>>>>> 104b65a6409f9d6ba105288e6952992f9f09ce79

/**
 * @namespace errors
 * @description
 * Namespace for all custom error types supported by the library.
 *
 * In addition to the custom error type used by each method (regular error), they can also reject with
 * {@link external:TypeError TypeError} when receiving invalid input parameters.
 *
 * @property {function} BatchError
<<<<<<< HEAD
 * {@link errors.BatchError BatchError} interface.
=======
 * {@link errors.BatchError BatchError} class.
>>>>>>> 104b65a6409f9d6ba105288e6952992f9f09ce79
 *
 * Represents regular errors that can be reported by method {@link batch}.
 *
 * @property {function} PageError
<<<<<<< HEAD
 * {@link errors.PageError PageError} interface.
=======
 * {@link errors.PageError PageError} class.
>>>>>>> 104b65a6409f9d6ba105288e6952992f9f09ce79
 *
 * Represents regular errors that can be reported by method {@link page}.
 *
 * @property {function} SequenceError
<<<<<<< HEAD
 * {@link errors.SequenceError SequenceError} interface.
=======
 * {@link errors.SequenceError SequenceError} class.
>>>>>>> 104b65a6409f9d6ba105288e6952992f9f09ce79
 *
 * Represents regular errors that can be reported by method {@link sequence}.
 *
 */
module.exports = {
<<<<<<< HEAD
    BatchError: $npm.BatchError,
    PageError: $npm.PageError,
    SequenceError: $npm.SequenceError
=======
    BatchError,
    PageError,
    SequenceError
>>>>>>> 104b65a6409f9d6ba105288e6952992f9f09ce79
};

Object.freeze(module.exports);
